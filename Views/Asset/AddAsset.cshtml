<div class="form-container">
    <h4 class="mb-4">Add Asset</h4>
    <form action="AddAssetsForm" id="itemForm">
        <!-- Image Upload Area -->
        <div class="image-upload-container" id="dropArea">
            <input name="ImageUrl" type="file" id="fileInput" accept="image/*" style="display: none;">
            <div class="upload-icon">
                <i class="fas fa-cloud-upload-alt"></i>
            </div>
            <div class="upload-text">
                Drag and drop or click to upload<br>
                (JPG, PNG, GIF, Max 5 MB)
            </div>
            <img id="preview-image" src="" alt="Preview">
            <div class="error-message" id="image-error"></div>
        </div>


        <div class="mb-3">
            <input name="Name" type="text" class="form-control" id="name" placeholder="name" required>
        </div>
        <div class="mb-3">
            <input name="Category" type="text" class="form-control" id="category" placeholder="category" required>
        </div>
        <div class="mb-3">
            <input name="Date" type="hidden" class="form-control" id="category" placeholder="DateTime" required>
        </div>

        <div class="mb-3">
            <input name="Type" type="text" class="form-control" id="category" placeholder="Type" required>
        </div>
        <div class="mb-3">
            <input name="Color" type="text" class="form-control" id="category" placeholder="Color" required>
        </div>
        <div class="mb-3">
            <input name="Location" type="text" class="form-control" id="category" placeholder="Type" required>
        </div>
        <div class="mb-3">
            <label  for="exampleSelect" class="form-label">Status</label>
            <select name="Status" class="form-select" id="exampleSelect">
                <option selected disabled></option>
                <option value="Pending">Pending </option>
                <option value="In-Progress">In-Progress </option>
                <option value="Complete">Complete</option>
            </select>
        </div>
        <div class="mb-4">
            <input name="Price" type="number" class="form-control" id="inStockCount" placeholder="in-stock count" required>
        </div>
        <div class="mb-4">
            <input name="User" type="number" class="form-control" id="inStockCount" placeholder="in-stock count" required>
        </div>

        <div class="text-center">
            <button type="submit" class="btn btn-primary">Add</button>
        </div>
    </form>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const dropArea = document.getElementById('dropArea');
        const fileInput = document.getElementById('fileInput');
        const previewImage = document.getElementById('preview-image');
        const imageError = document.getElementById('image-error');
        const form = document.getElementById('itemForm');

        // Open file dialog when clicking on the drop area
        dropArea.addEventListener('click', () => {
            fileInput.click();
        });

        // Prevent default behavior for drag events
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        // Highlight drop area when dragging over it
        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, unhighlight, false);
        });

        function highlight() {
            dropArea.classList.add('highlight');
        }

        function unhighlight() {
            dropArea.classList.remove('highlight');
        }

        // Handle dropped files
        dropArea.addEventListener('drop', handleDrop, false);

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;

            if (files.length > 0) {
                handleFiles(files);
            }
        }

        // Handle file input change
        fileInput.addEventListener('change', function() {
            handleFiles(this.files);
        });

        function handleFiles(files) {
            const file = files[0];

            // Check file type
            const validTypes = ['image/jpeg', 'image/png', 'image/gif'];
            if (!validTypes.includes(file.type)) {
                showError('Please upload a valid image file (JPG, PNG, or GIF)');
                return;
            }

            // Check file size (max 5MB)
            if (file.size > 5 * 1024 * 1024) {
                showError('File size exceeds 5MB limit');
                return;
            }

            // Preview the image
            const reader = new FileReader();
            reader.onload = function(e) {
                previewImage.src = e.target.result;
                previewImage.style.display = 'block';
                imageError.style.display = 'none';
                // Hide the icon and text when image is displayed
                document.querySelector('.upload-icon').style.display = 'none';
                document.querySelector('.upload-text').style.display = 'none';
            }
            reader.readAsDataURL(file);
        }

        function showError(message) {
            imageError.textContent = message;
            imageError.style.display = 'block';
            previewImage.style.display = 'none';
            // Show the icon and text when there's an error
            document.querySelector('.upload-icon').style.display = 'block';
            document.querySelector('.upload-text').style.display = 'block';
        }

        // Form submission (you can customize this based on your backend needs)
        form.addEventListener('submit', function(e) {
            e.preventDefault();

            // Check if image is uploaded
            if (!fileInput.files.length) {
                showError('Please upload a product image');
                return;
            }

            // Here you would typically submit the form data
            // For example, using FormData and fetch:
            const formData = new FormData(form);

            // Example fetch request (uncomment and modify as needed)
            /*
            fetch('your-backend-endpoint', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
                // Handle success (e.g., show success message, reset form)
                form.reset();
                previewImage.style.display = 'none';
                document.querySelector('.upload-icon').style.display = 'block';
                document.querySelector('.upload-text').style.display = 'block';
            })
            .catch(error => {
                console.error('Error:', error);
                // Handle error
            });
            */

            // For demo purposes, just log the form data
            console.log('Form submitted!');
            for (let [key, value] of formData.entries()) {
                console.log(key, value);
            }

            // Comment out the alert for production use
            alert('Product added successfully!');

            // Reset form
            form.reset();
            previewImage.style.display = 'none';
            document.querySelector('.upload-icon').style.display = 'block';
            document.querySelector('.upload-text').style.display = 'block';
        });
    });
</script>
